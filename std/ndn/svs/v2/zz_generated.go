// Code generated by ndn tlv codegen DO NOT EDIT.
package svs

import (
	"io"

	enc "github.com/named-data/ndnd/std/encoding"
)

type SvsDataEncoder struct {
	Length uint

	StateVector_encoder StateVectorEncoder
}

type SvsDataParsingContext struct {
	StateVector_context StateVectorParsingContext
}

// Initializes the encoder with the provided SVS data and calculates the total encoded length, including the state vector's presence, its TLV encoding overhead, and its own length.
func (encoder *SvsDataEncoder) Init(value *SvsData) {
	if value.StateVector != nil {
		encoder.StateVector_encoder.Init(value.StateVector)
	}

	l := uint(0)
	if value.StateVector != nil {
		l += 1
		l += uint(enc.TLNum(encoder.StateVector_encoder.Length).EncodingLength())
		l += encoder.StateVector_encoder.Length
	}
	encoder.Length = l

}

// Initializes the internal state vector context of the SVS data parsing context, preparing it for state vector data processing.
func (context *SvsDataParsingContext) Init() {
	context.StateVector_context.Init()
}

// Encodes the StateVector field of the provided SVSData into the given byte buffer, prepending a type marker (201) and length prefix if the StateVector is non-nil.
func (encoder *SvsDataEncoder) EncodeInto(value *SvsData, buf []byte) {

	pos := uint(0)

	if value.StateVector != nil {
		buf[pos] = byte(201)
		pos += 1
		pos += uint(enc.TLNum(encoder.StateVector_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.StateVector_encoder.Length > 0 {
			encoder.StateVector_encoder.EncodeInto(value.StateVector, buf[pos:])
			pos += encoder.StateVector_encoder.Length
		}
	}
}

// Encodes the provided `SvsData` value into a wire-format byte slice using the encoder's predefined length and returns it as a `Wire` structure.
func (encoder *SvsDataEncoder) Encode(value *SvsData) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses TLV-encoded SVS data into an SvsData structure, extracting the StateVector field and handling unrecognized critical fields according to the ignoreCritical flag.
func (context *SvsDataParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*SvsData, error) {

	var handled_StateVector bool = false

	progress := -1
	_ = progress

	value := &SvsData{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 201:
				if true {
					handled = true
					handled_StateVector = true
					value.StateVector, err = context.StateVector_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_StateVector && err == nil {
		value.StateVector = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the SVS data structure into a wire-format representation using the specified encoder for network transmission.
func (value *SvsData) Encode() enc.Wire {
	encoder := SvsDataEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Returns the byte representation of the SVS data by encoding its contents and joining the result into a single byte slice.
func (value *SvsData) Bytes() []byte {
	return value.Encode().Join()
}

// Parses encoded SVS data from a WireView reader into an SvsData structure, with an option to ignore critical parsing errors.
func ParseSvsData(reader enc.WireView, ignoreCritical bool) (*SvsData, error) {
	context := SvsDataParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type StateVectorEncoder struct {
	Length uint

	Entries_subencoder []struct {
		Entries_encoder StateVectorEntryEncoder
	}
}

type StateVectorParsingContext struct {
	Entries_context StateVectorEntryParsingContext
}

// Initializes the StateVectorEncoder with the provided StateVector, setting up subencoders for each entry and calculating the total encoded length including TLV overhead for the entire structure.
func (encoder *StateVectorEncoder) Init(value *StateVector) {
	{
		Entries_l := len(value.Entries)
		encoder.Entries_subencoder = make([]struct {
			Entries_encoder StateVectorEntryEncoder
		}, Entries_l)
		for i := 0; i < Entries_l; i++ {
			pseudoEncoder := &encoder.Entries_subencoder[i]
			pseudoValue := struct {
				Entries *StateVectorEntry
			}{
				Entries: value.Entries[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Entries != nil {
					encoder.Entries_encoder.Init(value.Entries)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.Entries != nil {
		for seq_i, seq_v := range value.Entries {
			pseudoEncoder := &encoder.Entries_subencoder[seq_i]
			pseudoValue := struct {
				Entries *StateVectorEntry
			}{
				Entries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Entries != nil {
					l += 1
					l += uint(enc.TLNum(encoder.Entries_encoder.Length).EncodingLength())
					l += encoder.Entries_encoder.Length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

// Initializes the entries context within the state vector parsing context.
func (context *StateVectorParsingContext) Init() {
	context.Entries_context.Init()
}

// Encodes a StateVector into a binary TLV format in the provided buffer, writing each entry with a type byte 0xC2 (202), encoded length, and subencoder-specific value data.
func (encoder *StateVectorEncoder) EncodeInto(value *StateVector, buf []byte) {

	pos := uint(0)

	if value.Entries != nil {
		for seq_i, seq_v := range value.Entries {
			pseudoEncoder := &encoder.Entries_subencoder[seq_i]
			pseudoValue := struct {
				Entries *StateVectorEntry
			}{
				Entries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Entries != nil {
					buf[pos] = byte(202)
					pos += 1
					pos += uint(enc.TLNum(encoder.Entries_encoder.Length).EncodeInto(buf[pos:]))
					if encoder.Entries_encoder.Length > 0 {
						encoder.Entries_encoder.EncodeInto(value.Entries, buf[pos:])
						pos += encoder.Entries_encoder.Length
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

// Encodes the given StateVector into a byte slice using the encoder's configured length, returning it as a single-element wire format structure.
func (encoder *StateVectorEncoder) Encode(value *StateVector) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a StateVector from TLV-encoded data using the provided context, handling entries (type 202) and skipping or rejecting critical fields based on the ignoreCritical flag.
func (context *StateVectorParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*StateVector, error) {

	var handled_Entries bool = false

	progress := -1
	_ = progress

	value := &StateVector{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 202:
				if true {
					handled = true
					handled_Entries = true
					if value.Entries == nil {
						value.Entries = make([]*StateVectorEntry, 0)
					}
					{
						pseudoValue := struct {
							Entries *StateVectorEntry
						}{}
						{
							value := &pseudoValue
							value.Entries, err = context.Entries_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.Entries = append(value.Entries, pseudoValue.Entries)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Entries && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the StateVector into a wire format using the StateVectorEncoder for serialization.
func (value *StateVector) Encode() enc.Wire {
	encoder := StateVectorEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Returns the byte slice representation of the StateVector by encoding and concatenating its components.
func (value *StateVector) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a StateVector from encoded wire format data using a parsing context, with an option to ignore unrecognized critical fields.
func ParseStateVector(reader enc.WireView, ignoreCritical bool) (*StateVector, error) {
	context := StateVectorParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type StateVectorEntryEncoder struct {
	Length uint

	Name_length uint
}

type StateVectorEntryParsingContext struct {
}

// Initializes the encoder's total length by calculating the combined encoded size of the StateVectorEntry's name components and sequence number, including TLV encoding overhead.
func (encoder *StateVectorEntryEncoder) Init(value *StateVectorEntry) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Name_length).EncodingLength())
		l += encoder.Name_length
	}
	l += 1
	l += uint(1 + enc.Nat(value.SeqNo).EncodingLength())
	encoder.Length = l

}

// Initializes the parsing context for a StateVectorEntry, preparing it for subsequent parsing operations.
func (context *StateVectorEntryParsingContext) Init() {

}

// Encodes a StateVectorEntry into a binary buffer using TLV (Type-Length-Value) format, representing the entry's name components and sequence number for efficient data transmission.
func (encoder *StateVectorEntryEncoder) EncodeInto(value *StateVectorEntry, buf []byte) {

	pos := uint(0)

	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.Name_length).EncodeInto(buf[pos:]))
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	buf[pos] = byte(204)
	pos += 1

	buf[pos] = byte(enc.Nat(value.SeqNo).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
}

// Encodes a StateVectorEntry into a wire-encoded byte slice with length determined by the encoder's precomputed size.
func (encoder *StateVectorEntryEncoder) Encode(value *StateVectorEntry) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a TLV-encoded StateVectorEntry from a WireView, handling critical fields Name (type 7) and required SeqNo (type 204), with optional skipping of unrecognized critical fields when ignoreCritical is true.
func (context *StateVectorEntryParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*StateVectorEntry, error) {

	var handled_Name bool = false
	var handled_SeqNo bool = false

	progress := -1
	_ = progress

	value := &StateVectorEntry{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 7:
				if true {
					handled = true
					handled_Name = true
					delegate := reader.Delegate(int(l))
					value.Name, err = delegate.ReadName()
				}
			case 204:
				if true {
					handled = true
					handled_SeqNo = true
					value.SeqNo = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.SeqNo = uint64(value.SeqNo<<8) | uint64(x)
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Name && err == nil {
		value.Name = nil
	}
	if !handled_SeqNo && err == nil {
		err = enc.ErrSkipRequired{Name: "SeqNo", TypeNum: 204}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the StateVectorEntry into a wire format representation using the StateVectorEntryEncoder.
func (value *StateVectorEntry) Encode() enc.Wire {
	encoder := StateVectorEntryEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Returns a byte slice representing the encoded and concatenated form of the StateVectorEntry.
func (value *StateVectorEntry) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a StateVectorEntry from encoded wire-format data, with an option to ignore critical parsing errors.
func ParseStateVectorEntry(reader enc.WireView, ignoreCritical bool) (*StateVectorEntry, error) {
	context := StateVectorEntryParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}
