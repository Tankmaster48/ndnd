// Code generated by ndn tlv codegen DO NOT EDIT.
package spec_2022

import (
	"encoding/binary"
	"io"
	"strings"

	"time"

	enc "github.com/named-data/ndnd/std/encoding"
)

type DataEncoder struct {
	Length uint

	wirePlan []uint

	sigCovered             enc.Wire
	sigCoverStart          int
	sigCoverStart_wireIdx  int
	sigCoverStart_pos      int
	NameV_length           uint
	MetaInfo_encoder       MetaInfoEncoder
	ContentV_length        uint
	SignatureInfo_encoder  SignatureInfoEncoder
	SignatureValue_wireIdx int
	SignatureValue_estLen  uint
	CrossSchemaV_length    uint
}

type DataParsingContext struct {
	sigCovered    enc.Wire
	sigCoverStart int

	MetaInfo_context MetaInfoParsingContext

	SignatureInfo_context SignatureInfoParsingContext
}

// Initializes the DataEncoder by calculating the total encoded length and constructing a wire format layout plan for the Data packet's fields, including name components, metadata, content, signature info, and cross-schema data.
func (encoder *DataEncoder) Init(value *Data) {

	if value.NameV != nil {
		encoder.NameV_length = 0
		for _, c := range value.NameV {
			encoder.NameV_length += uint(c.EncodingLength())
		}
	}
	if value.MetaInfo != nil {
		encoder.MetaInfo_encoder.Init(value.MetaInfo)
	}
	if value.ContentV != nil {
		encoder.ContentV_length = 0
		for _, c := range value.ContentV {
			encoder.ContentV_length += uint(len(c))
		}
	}
	if value.SignatureInfo != nil {
		encoder.SignatureInfo_encoder.Init(value.SignatureInfo)
	}
	encoder.SignatureValue_wireIdx = -1
	if value.CrossSchemaV != nil {
		encoder.CrossSchemaV_length = 0
		for _, c := range value.CrossSchemaV {
			encoder.CrossSchemaV_length += uint(len(c))
		}
	}

	l := uint(0)

	encoder.sigCoverStart = int(l)
	if value.NameV != nil {
		l += 1
		l += uint(enc.TLNum(encoder.NameV_length).EncodingLength())
		l += encoder.NameV_length
	}
	if value.MetaInfo != nil {
		l += 1
		l += uint(enc.TLNum(encoder.MetaInfo_encoder.Length).EncodingLength())
		l += encoder.MetaInfo_encoder.Length
	}
	if value.ContentV != nil {
		l += 1
		l += uint(enc.TLNum(encoder.ContentV_length).EncodingLength())
		l += encoder.ContentV_length
	}
	if value.SignatureInfo != nil {
		l += 1
		l += uint(enc.TLNum(encoder.SignatureInfo_encoder.Length).EncodingLength())
		l += encoder.SignatureInfo_encoder.Length
	}
	if encoder.SignatureValue_estLen > 0 {
		l += 1
		l += uint(enc.TLNum(encoder.SignatureValue_estLen).EncodingLength())
		l += encoder.SignatureValue_estLen
	}
	if value.CrossSchemaV != nil {
		l += 3
		l += uint(enc.TLNum(encoder.CrossSchemaV_length).EncodingLength())
		l += encoder.CrossSchemaV_length
	}
	encoder.Length = l

	wirePlan := make([]uint, 0, 8)
	l = uint(0)

	if value.NameV != nil {
		l += 1
		l += uint(enc.TLNum(encoder.NameV_length).EncodingLength())
		l += encoder.NameV_length
	}
	if value.MetaInfo != nil {
		l += 1
		l += uint(enc.TLNum(encoder.MetaInfo_encoder.Length).EncodingLength())
		l += encoder.MetaInfo_encoder.Length
	}
	if value.ContentV != nil {
		l += 1
		l += uint(enc.TLNum(encoder.ContentV_length).EncodingLength())
		wirePlan = append(wirePlan, l)
		l = 0
		for range value.ContentV {
			wirePlan = append(wirePlan, l)
			l = 0
		}
	}
	if value.SignatureInfo != nil {
		l += 1
		l += uint(enc.TLNum(encoder.SignatureInfo_encoder.Length).EncodingLength())
		l += encoder.SignatureInfo_encoder.Length
	}
	if encoder.SignatureValue_estLen > 0 {
		l += 1
		l += uint(enc.TLNum(encoder.SignatureValue_estLen).EncodingLength())
		wirePlan = append(wirePlan, l)
		l = 0
		encoder.SignatureValue_wireIdx = len(wirePlan)
		wirePlan = append(wirePlan, l)
		l = 0
	}
	if value.CrossSchemaV != nil {
		l += 3
		l += uint(enc.TLNum(encoder.CrossSchemaV_length).EncodingLength())
		wirePlan = append(wirePlan, l)
		l = 0
		for range value.CrossSchemaV {
			wirePlan = append(wirePlan, l)
			l = 0
		}
	}
	if l > 0 {
		wirePlan = append(wirePlan, l)
	}
	encoder.wirePlan = wirePlan
}

// Initializes the DataParsingContext by resetting its MetaInfo and SignatureInfo components and preparing an empty buffer for signature-covered data.
func (context *DataParsingContext) Init() {

	context.MetaInfo_context.Init()

	context.SignatureInfo_context.Init()
	context.sigCovered = make(enc.Wire, 0)

}

// Encodes a Data object into a TLV (Type-Length-Value) wire format, handling components such as name, meta-info, content, signature info/value, and cross-schema data, while managing multi-buffer encoding and tracking signature-covered regions for signing.
func (encoder *DataEncoder) EncodeInto(value *Data, wire enc.Wire) {

	wireIdx := 0
	buf := wire[wireIdx]

	pos := uint(0)

	encoder.sigCoverStart_wireIdx = int(wireIdx)
	encoder.sigCoverStart_pos = int(pos)
	if value.NameV != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.NameV_length).EncodeInto(buf[pos:]))
		for _, c := range value.NameV {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	if value.MetaInfo != nil {
		buf[pos] = byte(20)
		pos += 1
		pos += uint(enc.TLNum(encoder.MetaInfo_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.MetaInfo_encoder.Length > 0 {
			encoder.MetaInfo_encoder.EncodeInto(value.MetaInfo, buf[pos:])
			pos += encoder.MetaInfo_encoder.Length
		}
	}
	if value.ContentV != nil {
		buf[pos] = byte(21)
		pos += 1
		pos += uint(enc.TLNum(encoder.ContentV_length).EncodeInto(buf[pos:]))
		wireIdx++
		pos = 0
		if wireIdx < len(wire) {
			buf = wire[wireIdx]
		} else {
			buf = nil
		}
		for _, w := range value.ContentV {
			wire[wireIdx] = w
			wireIdx++
			pos = 0
			if wireIdx < len(wire) {
				buf = wire[wireIdx]
			} else {
				buf = nil
			}
		}
	}
	if value.SignatureInfo != nil {
		buf[pos] = byte(22)
		pos += 1
		pos += uint(enc.TLNum(encoder.SignatureInfo_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.SignatureInfo_encoder.Length > 0 {
			encoder.SignatureInfo_encoder.EncodeInto(value.SignatureInfo, buf[pos:])
			pos += encoder.SignatureInfo_encoder.Length
		}
	}
	if encoder.SignatureValue_estLen > 0 {
		startPos := int(pos)
		buf[pos] = byte(23)
		pos += 1
		pos += uint(enc.TLNum(encoder.SignatureValue_estLen).EncodeInto(buf[pos:]))
		if encoder.sigCoverStart_wireIdx == int(wireIdx) {
			coveredPart := buf[encoder.sigCoverStart:startPos]
			encoder.sigCovered = append(encoder.sigCovered, coveredPart)
		} else {
			coverStart := wire[encoder.sigCoverStart_wireIdx][encoder.sigCoverStart:]
			encoder.sigCovered = append(encoder.sigCovered, coverStart)
			for i := encoder.sigCoverStart_wireIdx + 1; i < int(wireIdx); i++ {
				encoder.sigCovered = append(encoder.sigCovered, wire[i])
			}
			coverEnd := buf[:startPos]
			encoder.sigCovered = append(encoder.sigCovered, coverEnd)
		}
		wireIdx++
		pos = 0
		if wireIdx < len(wire) {
			buf = wire[wireIdx]
		} else {
			buf = nil
		}
		wireIdx++
		pos = 0
		if wireIdx < len(wire) {
			buf = wire[wireIdx]
		} else {
			buf = nil
		}
	}
	if value.CrossSchemaV != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(600))
		pos += 3
		pos += uint(enc.TLNum(encoder.CrossSchemaV_length).EncodeInto(buf[pos:]))
		wireIdx++
		pos = 0
		if wireIdx < len(wire) {
			buf = wire[wireIdx]
		} else {
			buf = nil
		}
		for _, w := range value.CrossSchemaV {
			wire[wireIdx] = w
			wireIdx++
			pos = 0
			if wireIdx < len(wire) {
				buf = wire[wireIdx]
			} else {
				buf = nil
			}
		}
	}
}

// Encodes a Data object into a wire-format byte slice using a predefined layout, allocating buffer segments according to the encoder's wire plan.
func (encoder *DataEncoder) Encode(value *Data) enc.Wire {
	total := uint(0)
	for _, l := range encoder.wirePlan {
		total += l
	}
	content := make([]byte, total)

	wire := make(enc.Wire, len(encoder.wirePlan))
	for i, l := range encoder.wirePlan {
		if l > 0 {
			wire[i] = content[:l]
			content = content[l:]
		}
	}
	encoder.EncodeInto(value, wire)

	return wire
}

// Parses a Data packet from NDN wire format, handling fields such as Name, MetaInfo, Content, and Signature components while respecting criticality and order constraints.
func (context *DataParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*Data, error) {

	var handled_sigCovered bool = false
	var handled_sigCoverStart bool = false
	var handled_NameV bool = false
	var handled_MetaInfo bool = false
	var handled_ContentV bool = false
	var handled_SignatureInfo bool = false
	var handled_SignatureValue bool = false
	var handled_CrossSchemaV bool = false

	progress := -1
	_ = progress

	value := &Data{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		for handled := false; !handled && progress < 8; progress++ {
			switch typ {
			case 7:
				if progress+1 == 2 {
					handled = true
					handled_NameV = true
					delegate := reader.Delegate(int(l))
					value.NameV, err = delegate.ReadName()
				}
			case 20:
				if progress+1 == 3 {
					handled = true
					handled_MetaInfo = true
					value.MetaInfo, err = context.MetaInfo_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 21:
				if progress+1 == 4 {
					handled = true
					handled_ContentV = true
					value.ContentV, err = reader.ReadWire(int(l))
				}
			case 22:
				if progress+1 == 5 {
					handled = true
					handled_SignatureInfo = true
					value.SignatureInfo, err = context.SignatureInfo_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 23:
				if progress+1 == 6 {
					handled = true
					handled_SignatureValue = true
					value.SignatureValue, err = reader.ReadWire(int(l))
					if err == nil {
						coveredPart := reader.Range(context.sigCoverStart, startPos)
						context.sigCovered = append(context.sigCovered, coveredPart...)
					}
				}
			case 600:
				if progress+1 == 7 {
					handled = true
					handled_CrossSchemaV = true
					value.CrossSchemaV, err = reader.ReadWire(int(l))
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					handled_sigCovered = true
					// base - skip
				case 1 - 1:
					handled_sigCoverStart = true
					context.sigCoverStart = int(startPos)
				case 2 - 1:
					handled_NameV = true
					value.NameV = nil
				case 3 - 1:
					handled_MetaInfo = true
					value.MetaInfo = nil
				case 4 - 1:
					handled_ContentV = true
					value.ContentV = nil
				case 5 - 1:
					handled_SignatureInfo = true
					value.SignatureInfo = nil
				case 6 - 1:
					handled_SignatureValue = true
					value.SignatureValue = nil
				case 7 - 1:
					handled_CrossSchemaV = true
					value.CrossSchemaV = nil
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_sigCovered && err == nil {
		// base - skip
	}
	if !handled_sigCoverStart && err == nil {
		context.sigCoverStart = int(startPos)
	}
	if !handled_NameV && err == nil {
		value.NameV = nil
	}
	if !handled_MetaInfo && err == nil {
		value.MetaInfo = nil
	}
	if !handled_ContentV && err == nil {
		value.ContentV = nil
	}
	if !handled_SignatureInfo && err == nil {
		value.SignatureInfo = nil
	}
	if !handled_SignatureValue && err == nil {
		value.SignatureValue = nil
	}
	if !handled_CrossSchemaV && err == nil {
		value.CrossSchemaV = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

type MetaInfoEncoder struct {
	Length uint
}

type MetaInfoParsingContext struct {
}

// Calculates the total TLV-encoded length of the MetaInfo by summing the contributions from each present field (ContentType, FreshnessPeriod, FinalBlockID) according to NDN encoding rules.
func (encoder *MetaInfoEncoder) Init(value *MetaInfo) {

	l := uint(0)
	if optval, ok := value.ContentType.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.FreshnessPeriod.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(uint64(optval/time.Millisecond)).EncodingLength())
	}
	if value.FinalBlockID != nil {
		l += 1
		l += uint(enc.TLNum(len(value.FinalBlockID)).EncodingLength())
		l += uint(len(value.FinalBlockID))
	}
	encoder.Length = l

}

// Initializes the metadata parsing context, preparing it for subsequent metadata parsing operations.
func (context *MetaInfoParsingContext) Init() {

}

// Encodes the optional metadata fields (ContentType, FreshnessPeriod, FinalBlockID) of an NDN Data packet into a TLV-encoded byte buffer using variable-length natural number encoding for lengths.  

This sentence captures the core purpose: encoding metadata fields into TLV format, mentions the specific fields involved, and highlights the variable-length encoding technique used for efficiency.
func (encoder *MetaInfoEncoder) EncodeInto(value *MetaInfo, buf []byte) {

	pos := uint(0)

	if optval, ok := value.ContentType.Get(); ok {
		buf[pos] = byte(24)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.FreshnessPeriod.Get(); ok {
		buf[pos] = byte(25)
		pos += 1

		buf[pos] = byte(enc.Nat(uint64(optval / time.Millisecond)).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if value.FinalBlockID != nil {
		buf[pos] = byte(26)
		pos += 1
		pos += uint(enc.TLNum(len(value.FinalBlockID)).EncodeInto(buf[pos:]))
		copy(buf[pos:], value.FinalBlockID)
		pos += uint(len(value.FinalBlockID))
	}
}

// Encodes the provided MetaInfo into a wire-encoded buffer of the specified length.
func (encoder *MetaInfoEncoder) Encode(value *MetaInfo) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a TLV-encoded MetaInfo structure from a wire format reader, handling ContentType, FreshnessPeriod, and FinalBlockID fields while respecting critical type handling based on the ignoreCritical flag.
func (context *MetaInfoParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*MetaInfo, error) {

	var handled_ContentType bool = false
	var handled_FreshnessPeriod bool = false
	var handled_FinalBlockID bool = false

	progress := -1
	_ = progress

	value := &MetaInfo{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 24:
				if true {
					handled = true
					handled_ContentType = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.ContentType.Set(optval)
					}
				}
			case 25:
				if true {
					handled = true
					handled_FreshnessPeriod = true
					{
						timeInt := uint64(0)
						timeInt = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								timeInt = uint64(timeInt<<8) | uint64(x)
							}
						}
						optval := time.Duration(timeInt) * time.Millisecond
						value.FreshnessPeriod.Set(optval)
					}
				}
			case 26:
				if true {
					handled = true
					handled_FinalBlockID = true
					value.FinalBlockID = make([]byte, l)
					_, err = reader.ReadFull(value.FinalBlockID)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_ContentType && err == nil {
		value.ContentType.Unset()
	}
	if !handled_FreshnessPeriod && err == nil {
		value.FreshnessPeriod.Unset()
	}
	if !handled_FinalBlockID && err == nil {
		value.FinalBlockID = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the MetaInfo into a wire format for network transmission.
func (value *MetaInfo) Encode() enc.Wire {
	encoder := MetaInfoEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Returns the encoded bytes of the MetaInfo structure.
func (value *MetaInfo) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a MetaInfo structure from the provided wire format data, using the specified parsing context and controlling whether unknown critical fields are ignored.
func ParseMetaInfo(reader enc.WireView, ignoreCritical bool) (*MetaInfo, error) {
	context := MetaInfoParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type SignatureInfoEncoder struct {
	Length uint

	KeyLocator_encoder KeyLocatorEncoder

	ValidityPeriod_encoder        ValidityPeriodEncoder
	AdditionalDescription_encoder CertAdditionalDescriptionEncoder
}

type SignatureInfoParsingContext struct {
	KeyLocator_context KeyLocatorParsingContext

	ValidityPeriod_context        ValidityPeriodParsingContext
	AdditionalDescription_context CertAdditionalDescriptionParsingContext
}

// Initializes the SignatureInfoEncoder with the provided SignatureInfo value, setting up internal encoders for optional fields and calculating the total encoded length required for TLV encoding.
func (encoder *SignatureInfoEncoder) Init(value *SignatureInfo) {

	if value.KeyLocator != nil {
		encoder.KeyLocator_encoder.Init(value.KeyLocator)
	}

	if value.ValidityPeriod != nil {
		encoder.ValidityPeriod_encoder.Init(value.ValidityPeriod)
	}
	if value.AdditionalDescription != nil {
		encoder.AdditionalDescription_encoder.Init(value.AdditionalDescription)
	}

	l := uint(0)
	l += 1
	l += uint(1 + enc.Nat(value.SignatureType).EncodingLength())
	if value.KeyLocator != nil {
		l += 1
		l += uint(enc.TLNum(encoder.KeyLocator_encoder.Length).EncodingLength())
		l += encoder.KeyLocator_encoder.Length
	}
	if value.SignatureNonce != nil {
		l += 1
		l += uint(enc.TLNum(len(value.SignatureNonce)).EncodingLength())
		l += uint(len(value.SignatureNonce))
	}
	if optval, ok := value.SignatureTime.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(uint64(optval/time.Millisecond)).EncodingLength())
	}
	if optval, ok := value.SignatureSeqNum.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if value.ValidityPeriod != nil {
		l += 3
		l += uint(enc.TLNum(encoder.ValidityPeriod_encoder.Length).EncodingLength())
		l += encoder.ValidityPeriod_encoder.Length
	}
	if value.AdditionalDescription != nil {
		l += 3
		l += uint(enc.TLNum(encoder.AdditionalDescription_encoder.Length).EncodingLength())
		l += encoder.AdditionalDescription_encoder.Length
	}
	encoder.Length = l

}

// Initializes the KeyLocator, ValidityPeriod, and AdditionalDescription sub-contexts of the SignatureInfoParsingContext to prepare for parsing operations.
func (context *SignatureInfoParsingContext) Init() {

	context.KeyLocator_context.Init()

	context.ValidityPeriod_context.Init()
	context.AdditionalDescription_context.Init()
}

// Encodes a SignatureInfo object into a TLV (Type-Length-Value) formatted byte buffer, serializing fields such as signature type, key locator, nonce, timestamp, sequence number, validity period, and additional description according to NDN specification rules.
func (encoder *SignatureInfoEncoder) EncodeInto(value *SignatureInfo, buf []byte) {

	pos := uint(0)

	buf[pos] = byte(27)
	pos += 1

	buf[pos] = byte(enc.Nat(value.SignatureType).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	if value.KeyLocator != nil {
		buf[pos] = byte(28)
		pos += 1
		pos += uint(enc.TLNum(encoder.KeyLocator_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.KeyLocator_encoder.Length > 0 {
			encoder.KeyLocator_encoder.EncodeInto(value.KeyLocator, buf[pos:])
			pos += encoder.KeyLocator_encoder.Length
		}
	}
	if value.SignatureNonce != nil {
		buf[pos] = byte(38)
		pos += 1
		pos += uint(enc.TLNum(len(value.SignatureNonce)).EncodeInto(buf[pos:]))
		copy(buf[pos:], value.SignatureNonce)
		pos += uint(len(value.SignatureNonce))
	}
	if optval, ok := value.SignatureTime.Get(); ok {
		buf[pos] = byte(40)
		pos += 1

		buf[pos] = byte(enc.Nat(uint64(optval / time.Millisecond)).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.SignatureSeqNum.Get(); ok {
		buf[pos] = byte(42)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if value.ValidityPeriod != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(253))
		pos += 3
		pos += uint(enc.TLNum(encoder.ValidityPeriod_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.ValidityPeriod_encoder.Length > 0 {
			encoder.ValidityPeriod_encoder.EncodeInto(value.ValidityPeriod, buf[pos:])
			pos += encoder.ValidityPeriod_encoder.Length
		}
	}
	if value.AdditionalDescription != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(258))
		pos += 3
		pos += uint(enc.TLNum(encoder.AdditionalDescription_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.AdditionalDescription_encoder.Length > 0 {
			encoder.AdditionalDescription_encoder.EncodeInto(value.AdditionalDescription, buf[pos:])
			pos += encoder.AdditionalDescription_encoder.Length
		}
	}
}

// Encodes a `SignatureInfo` into a byte slice with the pre-allocated length specified by the encoder and returns it as a `Wire` structure.
func (encoder *SignatureInfoEncoder) Encode(value *SignatureInfo) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses TLV-encoded `SignatureInfo` data into a structured object, processing critical and optional fields (e.g., `SignatureType`, `KeyLocator`, `ValidityPeriod`) using the provided context and `ignoreCritical` flag to handle unrecognized elements.
func (context *SignatureInfoParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*SignatureInfo, error) {

	var handled_SignatureType bool = false
	var handled_KeyLocator bool = false
	var handled_SignatureNonce bool = false
	var handled_SignatureTime bool = false
	var handled_SignatureSeqNum bool = false
	var handled_ValidityPeriod bool = false
	var handled_AdditionalDescription bool = false

	progress := -1
	_ = progress

	value := &SignatureInfo{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 27:
				if true {
					handled = true
					handled_SignatureType = true
					value.SignatureType = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.SignatureType = uint64(value.SignatureType<<8) | uint64(x)
						}
					}
				}
			case 28:
				if true {
					handled = true
					handled_KeyLocator = true
					value.KeyLocator, err = context.KeyLocator_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 38:
				if true {
					handled = true
					handled_SignatureNonce = true
					value.SignatureNonce = make([]byte, l)
					_, err = reader.ReadFull(value.SignatureNonce)
				}
			case 40:
				if true {
					handled = true
					handled_SignatureTime = true
					{
						timeInt := uint64(0)
						timeInt = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								timeInt = uint64(timeInt<<8) | uint64(x)
							}
						}
						optval := time.Duration(timeInt) * time.Millisecond
						value.SignatureTime.Set(optval)
					}
				}
			case 42:
				if true {
					handled = true
					handled_SignatureSeqNum = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.SignatureSeqNum.Set(optval)
					}
				}
			case 253:
				if true {
					handled = true
					handled_ValidityPeriod = true
					value.ValidityPeriod, err = context.ValidityPeriod_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 258:
				if true {
					handled = true
					handled_AdditionalDescription = true
					value.AdditionalDescription, err = context.AdditionalDescription_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_SignatureType && err == nil {
		err = enc.ErrSkipRequired{Name: "SignatureType", TypeNum: 27}
	}
	if !handled_KeyLocator && err == nil {
		value.KeyLocator = nil
	}
	if !handled_SignatureNonce && err == nil {
		value.SignatureNonce = nil
	}
	if !handled_SignatureTime && err == nil {
		value.SignatureTime.Unset()
	}
	if !handled_SignatureSeqNum && err == nil {
		value.SignatureSeqNum.Unset()
	}
	if !handled_ValidityPeriod && err == nil {
		value.ValidityPeriod = nil
	}
	if !handled_AdditionalDescription && err == nil {
		value.AdditionalDescription = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the SignatureInfo into its wire format representation for network transmission.
func (value *SignatureInfo) Encode() enc.Wire {
	encoder := SignatureInfoEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Returns the byte representation of the SignatureInfo by encoding its fields and joining any resulting segments into a single byte slice.
func (value *SignatureInfo) Bytes() []byte {
	return value.Encode().Join()
}

// Parses encoded signature information from the provided WireView reader into a SignatureInfo structure, with an option to skip critical fields if specified.
func ParseSignatureInfo(reader enc.WireView, ignoreCritical bool) (*SignatureInfo, error) {
	context := SignatureInfoParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type KeyLocatorEncoder struct {
	Length uint

	Name_length uint
}

type KeyLocatorParsingContext struct {
}

// Initializes the KeyLocator encoder by computing the total encoded length of the KeyLocator's Name components and KeyDigest, accounting for TLV encoding overhead.
func (encoder *KeyLocatorEncoder) Init(value *KeyLocator) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Name_length).EncodingLength())
		l += encoder.Name_length
	}
	if value.KeyDigest != nil {
		l += 1
		l += uint(enc.TLNum(len(value.KeyDigest)).EncodingLength())
		l += uint(len(value.KeyDigest))
	}
	encoder.Length = l

}

// Initializes the KeyLocatorParsingContext to prepare for parsing key locator information in NDN.
func (context *KeyLocatorParsingContext) Init() {

}

// Encodes a KeyLocator into a binary buffer using TLV format, writing the Name (type 7) with its components and KeyDigest (type 29) if non-nil.
func (encoder *KeyLocatorEncoder) EncodeInto(value *KeyLocator, buf []byte) {

	pos := uint(0)

	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.Name_length).EncodeInto(buf[pos:]))
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	if value.KeyDigest != nil {
		buf[pos] = byte(29)
		pos += 1
		pos += uint(enc.TLNum(len(value.KeyDigest)).EncodeInto(buf[pos:]))
		copy(buf[pos:], value.KeyDigest)
		pos += uint(len(value.KeyDigest))
	}
}

// Encodes the provided KeyLocator into a binary wire format using the encoder's pre-determined buffer length and returns the result as a slice of byte slices (enc.Wire).
func (encoder *KeyLocatorEncoder) Encode(value *KeyLocator) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a KeyLocator from TLV-encoded wire format, extracting Name (type 7) and KeyDigest (type 29) fields while handling critical/unrecognized types according to the ignoreCritical flag.
func (context *KeyLocatorParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*KeyLocator, error) {

	var handled_Name bool = false
	var handled_KeyDigest bool = false

	progress := -1
	_ = progress

	value := &KeyLocator{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 7:
				if true {
					handled = true
					handled_Name = true
					delegate := reader.Delegate(int(l))
					value.Name, err = delegate.ReadName()
				}
			case 29:
				if true {
					handled = true
					handled_KeyDigest = true
					value.KeyDigest = make([]byte, l)
					_, err = reader.ReadFull(value.KeyDigest)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Name && err == nil {
		value.Name = nil
	}
	if !handled_KeyDigest && err == nil {
		value.KeyDigest = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the KeyLocator into its wire format representation for transmission or storage.
func (value *KeyLocator) Encode() enc.Wire {
	encoder := KeyLocatorEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Returns the KeyLocator as a serialized byte slice by encoding its components and joining them.
func (value *KeyLocator) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a KeyLocator structure from a wire-encoded TLV format, optionally ignoring critical unrecognized elements to ensure backward compatibility.
func ParseKeyLocator(reader enc.WireView, ignoreCritical bool) (*KeyLocator, error) {
	context := KeyLocatorParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type ValidityPeriodEncoder struct {
	Length uint
}

type ValidityPeriodParsingContext struct {
}

// Calculates the total encoded length of a ValidityPeriod by summing the TLV header sizes (3 bytes each for NotBefore and NotAfter) plus the variable-length encodings of their respective value lengths and data.
func (encoder *ValidityPeriodEncoder) Init(value *ValidityPeriod) {

	l := uint(0)
	l += 3
	l += uint(enc.TLNum(len(value.NotBefore)).EncodingLength())
	l += uint(len(value.NotBefore))
	l += 3
	l += uint(enc.TLNum(len(value.NotAfter)).EncodingLength())
	l += uint(len(value.NotAfter))
	encoder.Length = l

}

// Initializes the ValidityPeriodParsingContext to prepare for parsing validity periods in NDN data packets.
func (context *ValidityPeriodParsingContext) Init() {

}

// Encodes a ValidityPeriod structure into a binary buffer, writing the NotBefore and NotAfter timestamps as TLV-encoded fields with type 253 and dynamic lengths.
func (encoder *ValidityPeriodEncoder) EncodeInto(value *ValidityPeriod, buf []byte) {

	pos := uint(0)

	buf[pos] = 253
	binary.BigEndian.PutUint16(buf[pos+1:], uint16(254))
	pos += 3
	pos += uint(enc.TLNum(len(value.NotBefore)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.NotBefore)
	pos += uint(len(value.NotBefore))
	buf[pos] = 253
	binary.BigEndian.PutUint16(buf[pos+1:], uint16(255))
	pos += 3
	pos += uint(enc.TLNum(len(value.NotAfter)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.NotAfter)
	pos += uint(len(value.NotAfter))
}

// Encodes a ValidityPeriod into a wire-format byte slice using the encoder's precomputed length and EncodeInto method.  

Example: Encodes a ValidityPeriod into a binary wire representation for NDN packet transmission.
func (encoder *ValidityPeriodEncoder) Encode(value *ValidityPeriod) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a validity period from TLV-encoded data, requiring both NotBefore and NotAfter string fields and handling critical extensions according to the ignoreCritical flag.
func (context *ValidityPeriodParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*ValidityPeriod, error) {

	var handled_NotBefore bool = false
	var handled_NotAfter bool = false

	progress := -1
	_ = progress

	value := &ValidityPeriod{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 254:
				if true {
					handled = true
					handled_NotBefore = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.NotBefore = builder.String()
						}
					}
				}
			case 255:
				if true {
					handled = true
					handled_NotAfter = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.NotAfter = builder.String()
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_NotBefore && err == nil {
		err = enc.ErrSkipRequired{Name: "NotBefore", TypeNum: 254}
	}
	if !handled_NotAfter && err == nil {
		err = enc.ErrSkipRequired{Name: "NotAfter", TypeNum: 255}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the ValidityPeriod into a binary wire format using the ValidityPeriodEncoder for network transmission or storage.
func (value *ValidityPeriod) Encode() enc.Wire {
	encoder := ValidityPeriodEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Serializes the validity period by encoding its components and joining them into a single byte slice.
func (value *ValidityPeriod) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a validity period from the provided encoded data using a parsing context, with an option to skip processing of critical fields.
func ParseValidityPeriod(reader enc.WireView, ignoreCritical bool) (*ValidityPeriod, error) {
	context := ValidityPeriodParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type CertDescriptionEntryEncoder struct {
	Length uint
}

type CertDescriptionEntryParsingContext struct {
}

// Calculates the total encoded length for a certificate description entry by summing the TLV encoding overhead and payload lengths of its key and value fields.
func (encoder *CertDescriptionEntryEncoder) Init(value *CertDescriptionEntry) {

	l := uint(0)
	l += 3
	l += uint(enc.TLNum(len(value.DescriptionKey)).EncodingLength())
	l += uint(len(value.DescriptionKey))
	l += 3
	l += uint(enc.TLNum(len(value.DescriptionValue)).EncodingLength())
	l += uint(len(value.DescriptionValue))
	encoder.Length = l

}

// Initializes the CertDescriptionEntryParsingContext for parsing certificate description entries.
func (context *CertDescriptionEntryParsingContext) Init() {

}

// Encodes a certificate description entry into a byte buffer using TLV (Type-Length-Value) format, writing the DescriptionKey with TLV type 513 and DescriptionValue with TLV type 514.
func (encoder *CertDescriptionEntryEncoder) EncodeInto(value *CertDescriptionEntry, buf []byte) {

	pos := uint(0)

	buf[pos] = 253
	binary.BigEndian.PutUint16(buf[pos+1:], uint16(513))
	pos += 3
	pos += uint(enc.TLNum(len(value.DescriptionKey)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.DescriptionKey)
	pos += uint(len(value.DescriptionKey))
	buf[pos] = 253
	binary.BigEndian.PutUint16(buf[pos+1:], uint16(514))
	pos += 3
	pos += uint(enc.TLNum(len(value.DescriptionValue)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.DescriptionValue)
	pos += uint(len(value.DescriptionValue))
}

// Encodes a CertDescriptionEntry into a wire-format byte slice using the encoder's specified length.
func (encoder *CertDescriptionEntryEncoder) Encode(value *CertDescriptionEntry) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a TLV-encoded certificate description entry into a CertDescriptionEntry struct, ensuring required fields (DescriptionKey and DescriptionValue) are present and handling unknown critical fields based on the ignoreCritical flag.
func (context *CertDescriptionEntryParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*CertDescriptionEntry, error) {

	var handled_DescriptionKey bool = false
	var handled_DescriptionValue bool = false

	progress := -1
	_ = progress

	value := &CertDescriptionEntry{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 513:
				if true {
					handled = true
					handled_DescriptionKey = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.DescriptionKey = builder.String()
						}
					}
				}
			case 514:
				if true {
					handled = true
					handled_DescriptionValue = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.DescriptionValue = builder.String()
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_DescriptionKey && err == nil {
		err = enc.ErrSkipRequired{Name: "DescriptionKey", TypeNum: 513}
	}
	if !handled_DescriptionValue && err == nil {
		err = enc.ErrSkipRequired{Name: "DescriptionValue", TypeNum: 514}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the certificate description entry into its wire format representation using the CertDescriptionEntryEncoder.
func (value *CertDescriptionEntry) Encode() enc.Wire {
	encoder := CertDescriptionEntryEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Encodes the certificate description entry into a concatenated byte slice.
func (value *CertDescriptionEntry) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a certificate description entry from wire format data using a parsing context, with an option to ignore critical fields during parsing.
func ParseCertDescriptionEntry(reader enc.WireView, ignoreCritical bool) (*CertDescriptionEntry, error) {
	context := CertDescriptionEntryParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type CertAdditionalDescriptionEncoder struct {
	Length uint

	DescriptionEntries_subencoder []struct {
		DescriptionEntries_encoder CertDescriptionEntryEncoder
	}
}

type CertAdditionalDescriptionParsingContext struct {
	DescriptionEntries_context CertDescriptionEntryParsingContext
}

// Initializes a CertAdditionalDescription encoder with the provided value, calculates and sets the total encoded length by aggregating the TLV-encoded lengths of each DescriptionEntry, including TLV overhead and sub-field lengths.
func (encoder *CertAdditionalDescriptionEncoder) Init(value *CertAdditionalDescription) {
	{
		DescriptionEntries_l := len(value.DescriptionEntries)
		encoder.DescriptionEntries_subencoder = make([]struct {
			DescriptionEntries_encoder CertDescriptionEntryEncoder
		}, DescriptionEntries_l)
		for i := 0; i < DescriptionEntries_l; i++ {
			pseudoEncoder := &encoder.DescriptionEntries_subencoder[i]
			pseudoValue := struct {
				DescriptionEntries *CertDescriptionEntry
			}{
				DescriptionEntries: value.DescriptionEntries[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.DescriptionEntries != nil {
					encoder.DescriptionEntries_encoder.Init(value.DescriptionEntries)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.DescriptionEntries != nil {
		for seq_i, seq_v := range value.DescriptionEntries {
			pseudoEncoder := &encoder.DescriptionEntries_subencoder[seq_i]
			pseudoValue := struct {
				DescriptionEntries *CertDescriptionEntry
			}{
				DescriptionEntries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.DescriptionEntries != nil {
					l += 3
					l += uint(enc.TLNum(encoder.DescriptionEntries_encoder.Length).EncodingLength())
					l += encoder.DescriptionEntries_encoder.Length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

// Initializes the internal description entries context within the certificate additional description parsing context.
func (context *CertAdditionalDescriptionParsingContext) Init() {
	context.DescriptionEntries_context.Init()
}

// Encodes a CertAdditionalDescription structure into the provided byte buffer using TLV encoding, sequentially processing each DescriptionEntry with its associated sub-encoder.
func (encoder *CertAdditionalDescriptionEncoder) EncodeInto(value *CertAdditionalDescription, buf []byte) {

	pos := uint(0)

	if value.DescriptionEntries != nil {
		for seq_i, seq_v := range value.DescriptionEntries {
			pseudoEncoder := &encoder.DescriptionEntries_subencoder[seq_i]
			pseudoValue := struct {
				DescriptionEntries *CertDescriptionEntry
			}{
				DescriptionEntries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.DescriptionEntries != nil {
					buf[pos] = 253
					binary.BigEndian.PutUint16(buf[pos+1:], uint16(512))
					pos += 3
					pos += uint(enc.TLNum(encoder.DescriptionEntries_encoder.Length).EncodeInto(buf[pos:]))
					if encoder.DescriptionEntries_encoder.Length > 0 {
						encoder.DescriptionEntries_encoder.EncodeInto(value.DescriptionEntries, buf[pos:])
						pos += encoder.DescriptionEntries_encoder.Length
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

// Encodes a CertAdditionalDescription value into a binary wire structure using the encoder's specified length, returning a slice containing the serialized byte data.
func (encoder *CertAdditionalDescriptionEncoder) Encode(value *CertAdditionalDescription) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a TLV-encoded certificate additional description, extracting description entries (type 512) and handling critical/non-critical fields according to the ignoreCritical flag.
func (context *CertAdditionalDescriptionParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*CertAdditionalDescription, error) {

	var handled_DescriptionEntries bool = false

	progress := -1
	_ = progress

	value := &CertAdditionalDescription{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 512:
				if true {
					handled = true
					handled_DescriptionEntries = true
					if value.DescriptionEntries == nil {
						value.DescriptionEntries = make([]*CertDescriptionEntry, 0)
					}
					{
						pseudoValue := struct {
							DescriptionEntries *CertDescriptionEntry
						}{}
						{
							value := &pseudoValue
							value.DescriptionEntries, err = context.DescriptionEntries_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.DescriptionEntries = append(value.DescriptionEntries, pseudoValue.DescriptionEntries)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_DescriptionEntries && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the certificate additional description into a binary wire format using a dedicated encoder.
func (value *CertAdditionalDescription) Encode() enc.Wire {
	encoder := CertAdditionalDescriptionEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Returns the byte representation of the certificate additional description by encoding its components and concatenating them into a single byte slice.
func (value *CertAdditionalDescription) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a certificate additional description from encoded wire data, optionally ignoring critical fields that may not be recognized or supported.
func ParseCertAdditionalDescription(reader enc.WireView, ignoreCritical bool) (*CertAdditionalDescription, error) {
	context := CertAdditionalDescriptionParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type InterestEncoder struct {
	Length uint

	wirePlan []uint

	sigCovered       enc.Wire
	digestCovered    enc.Wire
	NameV_length     uint
	NameV_needDigest bool
	NameV_wireIdx    int
	NameV_pos        uint

	ForwardingHintV_encoder LinksEncoder

	sigCoverStart                int
	sigCoverStart_wireIdx        int
	sigCoverStart_pos            int
	digestCoverStart             int
	digestCoverStart_wireIdx     int
	digestCoverStart_pos         int
	ApplicationParameters_length uint
	SignatureInfo_encoder        SignatureInfoEncoder
	SignatureValue_wireIdx       int
	SignatureValue_estLen        uint
	digestCoverEnd               int
	digestCoverEnd_wireIdx       int
	digestCoverEnd_pos           int
}

type InterestParsingContext struct {
	sigCovered    enc.Wire
	digestCovered enc.Wire
	NameV_wireIdx int
	NameV_pos     uint

	ForwardingHintV_context LinksParsingContext

	sigCoverStart    int
	digestCoverStart int

	SignatureInfo_context SignatureInfoParsingContext

	digestCoverEnd int
}

// Initializes an Interest encoder by calculating the total encoded length, setting up wire encoding positions for each field, and preparing a wire plan to guide the final byte-level encoding of the Interest packet.
func (encoder *InterestEncoder) Init(value *Interest) {

	encoder.NameV_wireIdx = -1
	encoder.NameV_length = 0
	if value.NameV != nil {
		if len(value.NameV) > 0 && value.NameV[len(value.NameV)-1].Typ == enc.TypeParametersSha256DigestComponent {
			value.NameV = value.NameV[:len(value.NameV)-1]
		}
		if encoder.NameV_needDigest {
			value.NameV = append(value.NameV, enc.Component{
				Typ: enc.TypeParametersSha256DigestComponent,
				Val: make([]byte, 32),
			})
		}
		for _, c := range value.NameV {
			encoder.NameV_length += uint(c.EncodingLength())
		}
	}

	if value.ForwardingHintV != nil {
		encoder.ForwardingHintV_encoder.Init(value.ForwardingHintV)
	}

	if value.ApplicationParameters != nil {
		encoder.ApplicationParameters_length = 0
		for _, c := range value.ApplicationParameters {
			encoder.ApplicationParameters_length += uint(len(c))
		}
	}
	if value.SignatureInfo != nil {
		encoder.SignatureInfo_encoder.Init(value.SignatureInfo)
	}
	encoder.SignatureValue_wireIdx = -1

	l := uint(0)

	if value.NameV != nil {
		l += 1
		l += uint(enc.TLNum(encoder.NameV_length).EncodingLength())
		l += encoder.NameV_length
	}
	if value.CanBePrefixV {
		l += 1
		l += 1
	}
	if value.MustBeFreshV {
		l += 1
		l += 1
	}
	if value.ForwardingHintV != nil {
		l += 1
		l += uint(enc.TLNum(encoder.ForwardingHintV_encoder.Length).EncodingLength())
		l += encoder.ForwardingHintV_encoder.Length
	}
	if value.NonceV.IsSet() {
		l += 1
		l += 1 + 4
	}
	if optval, ok := value.InterestLifetimeV.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(uint64(optval/time.Millisecond)).EncodingLength())
	}
	if value.HopLimitV != nil {
		l += 1
		l += 2
	}
	encoder.sigCoverStart = int(l)
	encoder.digestCoverStart = int(l)
	if value.ApplicationParameters != nil {
		l += 1
		l += uint(enc.TLNum(encoder.ApplicationParameters_length).EncodingLength())
		l += encoder.ApplicationParameters_length
	}
	if value.SignatureInfo != nil {
		l += 1
		l += uint(enc.TLNum(encoder.SignatureInfo_encoder.Length).EncodingLength())
		l += encoder.SignatureInfo_encoder.Length
	}
	if encoder.SignatureValue_estLen > 0 {
		l += 1
		l += uint(enc.TLNum(encoder.SignatureValue_estLen).EncodingLength())
		l += encoder.SignatureValue_estLen
	}
	encoder.digestCoverEnd = int(l)
	encoder.Length = l

	wirePlan := make([]uint, 0, 8)
	l = uint(0)

	if value.NameV != nil {
		l += 1
		l += uint(enc.TLNum(encoder.NameV_length).EncodingLength())
		l += encoder.NameV_length
	}
	if value.CanBePrefixV {
		l += 1
		l += 1
	}
	if value.MustBeFreshV {
		l += 1
		l += 1
	}
	if value.ForwardingHintV != nil {
		l += 1
		l += uint(enc.TLNum(encoder.ForwardingHintV_encoder.Length).EncodingLength())
		l += encoder.ForwardingHintV_encoder.Length
	}
	if value.NonceV.IsSet() {
		l += 1
		l += 1 + 4
	}
	if optval, ok := value.InterestLifetimeV.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(uint64(optval/time.Millisecond)).EncodingLength())
	}
	if value.HopLimitV != nil {
		l += 1
		l += 2
	}

	if value.ApplicationParameters != nil {
		l += 1
		l += uint(enc.TLNum(encoder.ApplicationParameters_length).EncodingLength())
		wirePlan = append(wirePlan, l)
		l = 0
		for range value.ApplicationParameters {
			wirePlan = append(wirePlan, l)
			l = 0
		}
	}
	if value.SignatureInfo != nil {
		l += 1
		l += uint(enc.TLNum(encoder.SignatureInfo_encoder.Length).EncodingLength())
		l += encoder.SignatureInfo_encoder.Length
	}
	if encoder.SignatureValue_estLen > 0 {
		l += 1
		l += uint(enc.TLNum(encoder.SignatureValue_estLen).EncodingLength())
		wirePlan = append(wirePlan, l)
		l = 0
		encoder.SignatureValue_wireIdx = len(wirePlan)
		wirePlan = append(wirePlan, l)
		l = 0
	}

	if l > 0 {
		wirePlan = append(wirePlan, l)
	}
	encoder.wirePlan = wirePlan
}

// Initializes an Interest parsing context by resetting its ForwardingHint and SignatureInfo sub-contexts and creating an empty buffer for signature-covered content.
func (context *InterestParsingContext) Init() {

	context.ForwardingHintV_context.Init()

	context.SignatureInfo_context.Init()
	context.sigCovered = make(enc.Wire, 0)

}

// Encodes an NDN Interest into a wire-format TLV structure, handling fields such as name components, optional parameters, and signature information while tracking covered data regions for cryptographic signing.
func (encoder *InterestEncoder) EncodeInto(value *Interest, wire enc.Wire) {

	wireIdx := 0
	buf := wire[wireIdx]

	pos := uint(0)

	if value.NameV != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.NameV_length).EncodeInto(buf[pos:]))
		sigCoverStart := pos

		i := 0
		for i = 0; i < len(value.NameV)-1; i++ {
			c := value.NameV[i]
			pos += uint(c.EncodeInto(buf[pos:]))
		}
		sigCoverEnd := pos
		encoder.NameV_wireIdx = int(wireIdx)
		if len(value.NameV) > 0 {
			encoder.NameV_pos = pos + 2
			c := value.NameV[i]
			pos += uint(c.EncodeInto(buf[pos:]))
			if !encoder.NameV_needDigest {
				sigCoverEnd = pos
			}
		}
		encoder.sigCovered = append(encoder.sigCovered, buf[sigCoverStart:sigCoverEnd])
	}
	if value.CanBePrefixV {
		buf[pos] = byte(33)
		pos += 1
		buf[pos] = byte(0)
		pos += 1
	}
	if value.MustBeFreshV {
		buf[pos] = byte(18)
		pos += 1
		buf[pos] = byte(0)
		pos += 1
	}
	if value.ForwardingHintV != nil {
		buf[pos] = byte(30)
		pos += 1
		pos += uint(enc.TLNum(encoder.ForwardingHintV_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.ForwardingHintV_encoder.Length > 0 {
			encoder.ForwardingHintV_encoder.EncodeInto(value.ForwardingHintV, buf[pos:])
			pos += encoder.ForwardingHintV_encoder.Length
		}
	}
	if optval, ok := value.NonceV.Get(); ok {
		buf[pos] = byte(10)
		pos += 1
		buf[pos] = 4
		binary.BigEndian.PutUint32(buf[pos+1:], uint32(optval))
		pos += 5
	}
	if optval, ok := value.InterestLifetimeV.Get(); ok {
		buf[pos] = byte(12)
		pos += 1

		buf[pos] = byte(enc.Nat(uint64(optval / time.Millisecond)).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if value.HopLimitV != nil {
		buf[pos] = byte(34)
		pos += 1
		buf[pos] = 1
		buf[pos+1] = byte(*value.HopLimitV)
		pos += 2
	}
	encoder.sigCoverStart_wireIdx = int(wireIdx)
	encoder.sigCoverStart_pos = int(pos)
	encoder.digestCoverStart_wireIdx = int(wireIdx)
	encoder.digestCoverStart_pos = int(pos)
	if value.ApplicationParameters != nil {
		buf[pos] = byte(36)
		pos += 1
		pos += uint(enc.TLNum(encoder.ApplicationParameters_length).EncodeInto(buf[pos:]))
		wireIdx++
		pos = 0
		if wireIdx < len(wire) {
			buf = wire[wireIdx]
		} else {
			buf = nil
		}
		for _, w := range value.ApplicationParameters {
			wire[wireIdx] = w
			wireIdx++
			pos = 0
			if wireIdx < len(wire) {
				buf = wire[wireIdx]
			} else {
				buf = nil
			}
		}
	}
	if value.SignatureInfo != nil {
		buf[pos] = byte(44)
		pos += 1
		pos += uint(enc.TLNum(encoder.SignatureInfo_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.SignatureInfo_encoder.Length > 0 {
			encoder.SignatureInfo_encoder.EncodeInto(value.SignatureInfo, buf[pos:])
			pos += encoder.SignatureInfo_encoder.Length
		}
	}
	if encoder.SignatureValue_estLen > 0 {
		startPos := int(pos)
		buf[pos] = byte(46)
		pos += 1
		pos += uint(enc.TLNum(encoder.SignatureValue_estLen).EncodeInto(buf[pos:]))
		if encoder.sigCoverStart_wireIdx == int(wireIdx) {
			coveredPart := buf[encoder.sigCoverStart:startPos]
			encoder.sigCovered = append(encoder.sigCovered, coveredPart)
		} else {
			coverStart := wire[encoder.sigCoverStart_wireIdx][encoder.sigCoverStart:]
			encoder.sigCovered = append(encoder.sigCovered, coverStart)
			for i := encoder.sigCoverStart_wireIdx + 1; i < int(wireIdx); i++ {
				encoder.sigCovered = append(encoder.sigCovered, wire[i])
			}
			coverEnd := buf[:startPos]
			encoder.sigCovered = append(encoder.sigCovered, coverEnd)
		}
		wireIdx++
		pos = 0
		if wireIdx < len(wire) {
			buf = wire[wireIdx]
		} else {
			buf = nil
		}
		wireIdx++
		pos = 0
		if wireIdx < len(wire) {
			buf = wire[wireIdx]
		} else {
			buf = nil
		}
	}
	encoder.digestCoverEnd_wireIdx = int(wireIdx)
	encoder.digestCoverEnd_pos = int(pos)
}

// Encodes an Interest object into a wire-format byte slice structure defined by the encoder's wire plan, returning a slice of byte slices representing each encoded component.
func (encoder *InterestEncoder) Encode(value *Interest) enc.Wire {
	total := uint(0)
	for _, l := range encoder.wirePlan {
		total += l
	}
	content := make([]byte, total)

	wire := make(enc.Wire, len(encoder.wirePlan))
	for i, l := range encoder.wirePlan {
		if l > 0 {
			wire[i] = content[:l]
			content = content[l:]
		}
	}
	encoder.EncodeInto(value, wire)

	return wire
}

// Parses a binary-encoded NDN Interest packet into an Interest object, handling TLV fields, signature/digest coverage tracking, and optional critical field validation based on the ignoreCritical flag.
func (context *InterestParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*Interest, error) {

	var handled_sigCovered bool = false
	var handled_digestCovered bool = false
	var handled_NameV bool = false
	var handled_CanBePrefixV bool = false
	var handled_MustBeFreshV bool = false
	var handled_ForwardingHintV bool = false
	var handled_NonceV bool = false
	var handled_InterestLifetimeV bool = false
	var handled_HopLimitV bool = false
	var handled_sigCoverStart bool = false
	var handled_digestCoverStart bool = false
	var handled_ApplicationParameters bool = false
	var handled_SignatureInfo bool = false
	var handled_SignatureValue bool = false
	var handled_digestCoverEnd bool = false

	progress := -1
	_ = progress

	value := &Interest{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		for handled := false; !handled && progress < 15; progress++ {
			switch typ {
			case 7:
				if progress+1 == 2 {
					handled = true
					handled_NameV = true
					{

						value.NameV = make(enc.Name, l/2+1)
						startName := reader.Pos()
						endName := startName + int(l)
						sigCoverEnd := endName
						for j := range value.NameV {
							var err1, err3 error
							startComponent := reader.Pos()
							if startComponent >= endName {
								value.NameV = value.NameV[:j]
								break
							}
							value.NameV[j].Typ, err1 = reader.ReadTLNum()
							l, err2 := reader.ReadTLNum()
							value.NameV[j].Val, err3 = reader.ReadBuf(int(l))
							if err1 != nil || err2 != nil || err3 != nil {
								err = io.ErrUnexpectedEOF
								break
							}
							if value.NameV[j].Typ == enc.TypeParametersSha256DigestComponent {
								sigCoverEnd = startComponent
							}
						}
						if err == nil && reader.Pos() != endName {
							err = enc.ErrBufferOverflow
						}
						if err == nil {
							coveredPart := reader.Range(startName, sigCoverEnd)
							context.sigCovered = append(context.sigCovered, coveredPart...)
						}
					}
				}
			case 33:
				if progress+1 == 3 {
					handled = true
					handled_CanBePrefixV = true
					value.CanBePrefixV = true
					err = reader.Skip(int(l))
				}
			case 18:
				if progress+1 == 4 {
					handled = true
					handled_MustBeFreshV = true
					value.MustBeFreshV = true
					err = reader.Skip(int(l))
				}
			case 30:
				if progress+1 == 5 {
					handled = true
					handled_ForwardingHintV = true
					value.ForwardingHintV, err = context.ForwardingHintV_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 10:
				if progress+1 == 6 {
					handled = true
					handled_NonceV = true
					{
						optval := uint32(0)
						optval = uint32(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint32(optval<<8) | uint32(x)
							}
						}
						value.NonceV.Set(optval)
					}
				}
			case 12:
				if progress+1 == 7 {
					handled = true
					handled_InterestLifetimeV = true
					{
						timeInt := uint64(0)
						timeInt = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								timeInt = uint64(timeInt<<8) | uint64(x)
							}
						}
						optval := time.Duration(timeInt) * time.Millisecond
						value.InterestLifetimeV.Set(optval)
					}
				}
			case 34:
				if progress+1 == 8 {
					handled = true
					handled_HopLimitV = true
					{
						buf, err := reader.ReadBuf(1)
						if err == io.EOF {
							err = io.ErrUnexpectedEOF
						}
						value.HopLimitV = &buf[0]
					}
				}
			case 36:
				if progress+1 == 11 {
					handled = true
					handled_ApplicationParameters = true
					value.ApplicationParameters, err = reader.ReadWire(int(l))
				}
			case 44:
				if progress+1 == 12 {
					handled = true
					handled_SignatureInfo = true
					value.SignatureInfo, err = context.SignatureInfo_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 46:
				if progress+1 == 13 {
					handled = true
					handled_SignatureValue = true
					value.SignatureValue, err = reader.ReadWire(int(l))
					if err == nil {
						coveredPart := reader.Range(context.sigCoverStart, startPos)
						context.sigCovered = append(context.sigCovered, coveredPart...)
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
				switch progress {
				case 0 - 1:
					handled_sigCovered = true
					// base - skip
				case 1 - 1:
					handled_digestCovered = true
					// base - skip
				case 2 - 1:
					handled_NameV = true
					value.NameV = nil
				case 3 - 1:
					handled_CanBePrefixV = true
					value.CanBePrefixV = false
				case 4 - 1:
					handled_MustBeFreshV = true
					value.MustBeFreshV = false
				case 5 - 1:
					handled_ForwardingHintV = true
					value.ForwardingHintV = nil
				case 6 - 1:
					handled_NonceV = true
					value.NonceV.Unset()
				case 7 - 1:
					handled_InterestLifetimeV = true
					value.InterestLifetimeV.Unset()
				case 8 - 1:
					handled_HopLimitV = true
					value.HopLimitV = nil
				case 9 - 1:
					handled_sigCoverStart = true
					context.sigCoverStart = int(startPos)
				case 10 - 1:
					handled_digestCoverStart = true
					context.digestCoverStart = int(startPos)
				case 11 - 1:
					handled_ApplicationParameters = true
					value.ApplicationParameters = nil
				case 12 - 1:
					handled_SignatureInfo = true
					value.SignatureInfo = nil
				case 13 - 1:
					handled_SignatureValue = true
					value.SignatureValue = nil
				case 14 - 1:
					handled_digestCoverEnd = true
					context.digestCoverEnd = int(startPos)
					context.digestCovered = reader.Range(context.digestCoverStart, startPos)
				}
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_sigCovered && err == nil {
		// base - skip
	}
	if !handled_digestCovered && err == nil {
		// base - skip
	}
	if !handled_NameV && err == nil {
		value.NameV = nil
	}
	if !handled_CanBePrefixV && err == nil {
		value.CanBePrefixV = false
	}
	if !handled_MustBeFreshV && err == nil {
		value.MustBeFreshV = false
	}
	if !handled_ForwardingHintV && err == nil {
		value.ForwardingHintV = nil
	}
	if !handled_NonceV && err == nil {
		value.NonceV.Unset()
	}
	if !handled_InterestLifetimeV && err == nil {
		value.InterestLifetimeV.Unset()
	}
	if !handled_HopLimitV && err == nil {
		value.HopLimitV = nil
	}
	if !handled_sigCoverStart && err == nil {
		context.sigCoverStart = int(startPos)
	}
	if !handled_digestCoverStart && err == nil {
		context.digestCoverStart = int(startPos)
	}
	if !handled_ApplicationParameters && err == nil {
		value.ApplicationParameters = nil
	}
	if !handled_SignatureInfo && err == nil {
		value.SignatureInfo = nil
	}
	if !handled_SignatureValue && err == nil {
		value.SignatureValue = nil
	}
	if !handled_digestCoverEnd && err == nil {
		context.digestCoverEnd = int(startPos)
		context.digestCovered = reader.Range(context.digestCoverStart, startPos)
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

type LinksEncoder struct {
	Length uint

	Names_subencoder []struct {
		Names_length uint
	}
}

type LinksParsingContext struct {
}

// Initializes the LinksEncoder with the provided Links value, precomputing the total encoded length by summing the TLV-encoded sizes of all name components and their associated headers.
func (encoder *LinksEncoder) Init(value *Links) {
	{
		Names_l := len(value.Names)
		encoder.Names_subencoder = make([]struct {
			Names_length uint
		}, Names_l)
		for i := 0; i < Names_l; i++ {
			pseudoEncoder := &encoder.Names_subencoder[i]
			pseudoValue := struct {
				Names enc.Name
			}{
				Names: value.Names[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Names != nil {
					encoder.Names_length = 0
					for _, c := range value.Names {
						encoder.Names_length += uint(c.EncodingLength())
					}
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.Names != nil {
		for seq_i, seq_v := range value.Names {
			pseudoEncoder := &encoder.Names_subencoder[seq_i]
			pseudoValue := struct {
				Names enc.Name
			}{
				Names: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Names != nil {
					l += 1
					l += uint(enc.TLNum(encoder.Names_length).EncodingLength())
					l += encoder.Names_length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

// Initializes the LinksParsingContext, preparing it for link parsing operations.
func (context *LinksParsingContext) Init() {

}

// Encodes the Names field of a Links structure into the provided byte buffer using NDN TLV format, with each name component prefixed by type 7 (Name) and encoded via subencoders.
func (encoder *LinksEncoder) EncodeInto(value *Links, buf []byte) {

	pos := uint(0)

	if value.Names != nil {
		for seq_i, seq_v := range value.Names {
			pseudoEncoder := &encoder.Names_subencoder[seq_i]
			pseudoValue := struct {
				Names enc.Name
			}{
				Names: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Names != nil {
					buf[pos] = byte(7)
					pos += 1
					pos += uint(enc.TLNum(encoder.Names_length).EncodeInto(buf[pos:]))
					for _, c := range value.Names {
						pos += uint(c.EncodeInto(buf[pos:]))
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

// Encodes the provided Links object into a pre-allocated byte slice of size determined by the encoder and returns it as an enc.Wire structure.
func (encoder *LinksEncoder) Encode(value *Links) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a TLV-encoded Links structure, extracting Name fields (type 7) and handling critical fields according to the ignoreCritical flag.
func (context *LinksParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*Links, error) {

	var handled_Names bool = false

	progress := -1
	_ = progress

	value := &Links{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 7:
				if true {
					handled = true
					handled_Names = true
					if value.Names == nil {
						value.Names = make([]enc.Name, 0)
					}
					{
						pseudoValue := struct {
							Names enc.Name
						}{}
						{
							value := &pseudoValue
							delegate := reader.Delegate(int(l))
							value.Names, err = delegate.ReadName()
							_ = value
						}
						value.Names = append(value.Names, pseudoValue.Names)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Names && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the Links object into a wire-format representation using the LinksEncoder, preparing it for transmission or storage.
func (value *Links) Encode() enc.Wire {
	encoder := LinksEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// **Function Description:**  
Returns the concatenated byte representation of the encoded `Links` value by joining its encoded components.
func (value *Links) Bytes() []byte {
	return value.Encode().Join()
}

// Parses link information from wire-format data into a Links structure, optionally ignoring critical fields not recognized during parsing.
func ParseLinks(reader enc.WireView, ignoreCritical bool) (*Links, error) {
	context := LinksParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type LpPacketEncoder struct {
	Length uint

	wirePlan []uint

	Nack_encoder NetworkNackEncoder

	CachePolicy_encoder CachePolicyEncoder

	PrefixAnnouncement_length uint
	Fragment_length           uint
}

type LpPacketParsingContext struct {
	Nack_context NetworkNackParsingContext

	CachePolicy_context CachePolicyParsingContext
}

// Initializes the LpPacketEncoder with the provided LpPacket, calculating the total encoded length and constructing a wire encoding plan based on the presence and size of optional fields.
func (encoder *LpPacketEncoder) Init(value *LpPacket) {

	if value.Nack != nil {
		encoder.Nack_encoder.Init(value.Nack)
	}

	if value.CachePolicy != nil {
		encoder.CachePolicy_encoder.Init(value.CachePolicy)
	}

	if value.PrefixAnnouncement != nil {
		encoder.PrefixAnnouncement_length = 0
		for _, c := range value.PrefixAnnouncement {
			encoder.PrefixAnnouncement_length += uint(len(c))
		}
	}
	if value.Fragment != nil {
		encoder.Fragment_length = 0
		for _, c := range value.Fragment {
			encoder.Fragment_length += uint(len(c))
		}
	}

	l := uint(0)
	if value.Sequence.IsSet() {
		l += 1
		l += 1 + 8
	}
	if optval, ok := value.FragIndex.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.FragCount.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if value.PitToken != nil {
		l += 1
		l += uint(enc.TLNum(len(value.PitToken)).EncodingLength())
		l += uint(len(value.PitToken))
	}
	if value.Nack != nil {
		l += 3
		l += uint(enc.TLNum(encoder.Nack_encoder.Length).EncodingLength())
		l += encoder.Nack_encoder.Length
	}
	if optval, ok := value.IncomingFaceId.Get(); ok {
		l += 3
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NextHopFaceId.Get(); ok {
		l += 3
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if value.CachePolicy != nil {
		l += 3
		l += uint(enc.TLNum(encoder.CachePolicy_encoder.Length).EncodingLength())
		l += encoder.CachePolicy_encoder.Length
	}
	if optval, ok := value.CongestionMark.Get(); ok {
		l += 3
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if value.Ack.IsSet() {
		l += 3
		l += 1 + 8
	}
	if value.TxSequence.IsSet() {
		l += 3
		l += 1 + 8
	}
	if value.NonDiscovery {
		l += 3
		l += 1
	}
	if value.PrefixAnnouncement != nil {
		l += 3
		l += uint(enc.TLNum(encoder.PrefixAnnouncement_length).EncodingLength())
		l += encoder.PrefixAnnouncement_length
	}
	if value.Fragment != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Fragment_length).EncodingLength())
		l += encoder.Fragment_length
	}
	encoder.Length = l

	wirePlan := make([]uint, 0, 8)
	l = uint(0)
	if value.Sequence.IsSet() {
		l += 1
		l += 1 + 8
	}
	if optval, ok := value.FragIndex.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.FragCount.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if value.PitToken != nil {
		l += 1
		l += uint(enc.TLNum(len(value.PitToken)).EncodingLength())
		l += uint(len(value.PitToken))
	}
	if value.Nack != nil {
		l += 3
		l += uint(enc.TLNum(encoder.Nack_encoder.Length).EncodingLength())
		l += encoder.Nack_encoder.Length
	}
	if optval, ok := value.IncomingFaceId.Get(); ok {
		l += 3
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NextHopFaceId.Get(); ok {
		l += 3
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if value.CachePolicy != nil {
		l += 3
		l += uint(enc.TLNum(encoder.CachePolicy_encoder.Length).EncodingLength())
		l += encoder.CachePolicy_encoder.Length
	}
	if optval, ok := value.CongestionMark.Get(); ok {
		l += 3
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if value.Ack.IsSet() {
		l += 3
		l += 1 + 8
	}
	if value.TxSequence.IsSet() {
		l += 3
		l += 1 + 8
	}
	if value.NonDiscovery {
		l += 3
		l += 1
	}
	if value.PrefixAnnouncement != nil {
		l += 3
		l += uint(enc.TLNum(encoder.PrefixAnnouncement_length).EncodingLength())
		wirePlan = append(wirePlan, l)
		l = 0
		for range value.PrefixAnnouncement {
			wirePlan = append(wirePlan, l)
			l = 0
		}
	}
	if value.Fragment != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Fragment_length).EncodingLength())
		wirePlan = append(wirePlan, l)
		l = 0
		for range value.Fragment {
			wirePlan = append(wirePlan, l)
			l = 0
		}
	}
	if l > 0 {
		wirePlan = append(wirePlan, l)
	}
	encoder.wirePlan = wirePlan
}

// Initializes the NACK handling and cache policy sub-contexts within the LP packet parsing context to prepare for packet processing.
func (context *LpPacketParsingContext) Init() {

	context.Nack_context.Init()

	context.CachePolicy_context.Init()

}

// Encodes an LpPacket into a wire-format byte slice using TLV encoding, handling optional fields, variable-length integers, and nested structures while managing multiple buffers for fragmented or complex data.
func (encoder *LpPacketEncoder) EncodeInto(value *LpPacket, wire enc.Wire) {

	wireIdx := 0
	buf := wire[wireIdx]

	pos := uint(0)

	if optval, ok := value.Sequence.Get(); ok {
		buf[pos] = byte(81)
		pos += 1
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(optval))
		pos += 9
	}
	if optval, ok := value.FragIndex.Get(); ok {
		buf[pos] = byte(82)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.FragCount.Get(); ok {
		buf[pos] = byte(83)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if value.PitToken != nil {
		buf[pos] = byte(98)
		pos += 1
		pos += uint(enc.TLNum(len(value.PitToken)).EncodeInto(buf[pos:]))
		copy(buf[pos:], value.PitToken)
		pos += uint(len(value.PitToken))
	}
	if value.Nack != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(800))
		pos += 3
		pos += uint(enc.TLNum(encoder.Nack_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Nack_encoder.Length > 0 {
			encoder.Nack_encoder.EncodeInto(value.Nack, buf[pos:])
			pos += encoder.Nack_encoder.Length
		}
	}
	if optval, ok := value.IncomingFaceId.Get(); ok {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(812))
		pos += 3

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.NextHopFaceId.Get(); ok {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(816))
		pos += 3

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if value.CachePolicy != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(820))
		pos += 3
		pos += uint(enc.TLNum(encoder.CachePolicy_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.CachePolicy_encoder.Length > 0 {
			encoder.CachePolicy_encoder.EncodeInto(value.CachePolicy, buf[pos:])
			pos += encoder.CachePolicy_encoder.Length
		}
	}
	if optval, ok := value.CongestionMark.Get(); ok {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(832))
		pos += 3

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.Ack.Get(); ok {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(836))
		pos += 3
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(optval))
		pos += 9
	}
	if optval, ok := value.TxSequence.Get(); ok {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(840))
		pos += 3
		buf[pos] = 8
		binary.BigEndian.PutUint64(buf[pos+1:], uint64(optval))
		pos += 9
	}
	if value.NonDiscovery {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(844))
		pos += 3
		buf[pos] = byte(0)
		pos += 1
	}
	if value.PrefixAnnouncement != nil {
		buf[pos] = 253
		binary.BigEndian.PutUint16(buf[pos+1:], uint16(848))
		pos += 3
		pos += uint(enc.TLNum(encoder.PrefixAnnouncement_length).EncodeInto(buf[pos:]))
		wireIdx++
		pos = 0
		if wireIdx < len(wire) {
			buf = wire[wireIdx]
		} else {
			buf = nil
		}
		for _, w := range value.PrefixAnnouncement {
			wire[wireIdx] = w
			wireIdx++
			pos = 0
			if wireIdx < len(wire) {
				buf = wire[wireIdx]
			} else {
				buf = nil
			}
		}
	}
	if value.Fragment != nil {
		buf[pos] = byte(80)
		pos += 1
		pos += uint(enc.TLNum(encoder.Fragment_length).EncodeInto(buf[pos:]))
		wireIdx++
		pos = 0
		if wireIdx < len(wire) {
			buf = wire[wireIdx]
		} else {
			buf = nil
		}
		for _, w := range value.Fragment {
			wire[wireIdx] = w
			wireIdx++
			pos = 0
			if wireIdx < len(wire) {
				buf = wire[wireIdx]
			} else {
				buf = nil
			}
		}
	}
}

// Encodes an LpPacket into a wire format by allocating a pre-sized buffer based on the encoder's wire plan and populating it with the packet's data.
func (encoder *LpPacketEncoder) Encode(value *LpPacket) enc.Wire {
	total := uint(0)
	for _, l := range encoder.wirePlan {
		total += l
	}
	content := make([]byte, total)

	wire := make(enc.Wire, len(encoder.wirePlan))
	for i, l := range encoder.wirePlan {
		if l > 0 {
			wire[i] = content[:l]
			content = content[l:]
		}
	}
	encoder.EncodeInto(value, wire)

	return wire
}

// Parses a TLV-encoded Link Protocol (LP) packet into a structured LpPacket object, processing optional fields like sequence numbers, fragmentation metadata, and NACK information while enforcing critical TLV type handling rules based on the ignoreCritical flag.
func (context *LpPacketParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*LpPacket, error) {

	var handled_Sequence bool = false
	var handled_FragIndex bool = false
	var handled_FragCount bool = false
	var handled_PitToken bool = false
	var handled_Nack bool = false
	var handled_IncomingFaceId bool = false
	var handled_NextHopFaceId bool = false
	var handled_CachePolicy bool = false
	var handled_CongestionMark bool = false
	var handled_Ack bool = false
	var handled_TxSequence bool = false
	var handled_NonDiscovery bool = false
	var handled_PrefixAnnouncement bool = false
	var handled_Fragment bool = false

	progress := -1
	_ = progress

	value := &LpPacket{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 81:
				if true {
					handled = true
					handled_Sequence = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Sequence.Set(optval)
					}
				}
			case 82:
				if true {
					handled = true
					handled_FragIndex = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.FragIndex.Set(optval)
					}
				}
			case 83:
				if true {
					handled = true
					handled_FragCount = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.FragCount.Set(optval)
					}
				}
			case 98:
				if true {
					handled = true
					handled_PitToken = true
					value.PitToken = make([]byte, l)
					_, err = reader.ReadFull(value.PitToken)
				}
			case 800:
				if true {
					handled = true
					handled_Nack = true
					value.Nack, err = context.Nack_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 812:
				if true {
					handled = true
					handled_IncomingFaceId = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.IncomingFaceId.Set(optval)
					}
				}
			case 816:
				if true {
					handled = true
					handled_NextHopFaceId = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NextHopFaceId.Set(optval)
					}
				}
			case 820:
				if true {
					handled = true
					handled_CachePolicy = true
					value.CachePolicy, err = context.CachePolicy_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 832:
				if true {
					handled = true
					handled_CongestionMark = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.CongestionMark.Set(optval)
					}
				}
			case 836:
				if true {
					handled = true
					handled_Ack = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Ack.Set(optval)
					}
				}
			case 840:
				if true {
					handled = true
					handled_TxSequence = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.TxSequence.Set(optval)
					}
				}
			case 844:
				if true {
					handled = true
					handled_NonDiscovery = true
					value.NonDiscovery = true
					err = reader.Skip(int(l))
				}
			case 848:
				if true {
					handled = true
					handled_PrefixAnnouncement = true
					value.PrefixAnnouncement, err = reader.ReadWire(int(l))
				}
			case 80:
				if true {
					handled = true
					handled_Fragment = true
					value.Fragment, err = reader.ReadWire(int(l))
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Sequence && err == nil {
		value.Sequence.Unset()
	}
	if !handled_FragIndex && err == nil {
		value.FragIndex.Unset()
	}
	if !handled_FragCount && err == nil {
		value.FragCount.Unset()
	}
	if !handled_PitToken && err == nil {
		value.PitToken = nil
	}
	if !handled_Nack && err == nil {
		value.Nack = nil
	}
	if !handled_IncomingFaceId && err == nil {
		value.IncomingFaceId.Unset()
	}
	if !handled_NextHopFaceId && err == nil {
		value.NextHopFaceId.Unset()
	}
	if !handled_CachePolicy && err == nil {
		value.CachePolicy = nil
	}
	if !handled_CongestionMark && err == nil {
		value.CongestionMark.Unset()
	}
	if !handled_Ack && err == nil {
		value.Ack.Unset()
	}
	if !handled_TxSequence && err == nil {
		value.TxSequence.Unset()
	}
	if !handled_NonDiscovery && err == nil {
		value.NonDiscovery = false
	}
	if !handled_PrefixAnnouncement && err == nil {
		value.PrefixAnnouncement = nil
	}
	if !handled_Fragment && err == nil {
		value.Fragment = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

type NetworkNackEncoder struct {
	Length uint
}

type NetworkNackParsingContext struct {
}

// Initializes the NetworkNackEncoder by calculating the total encoding length required to represent the NetworkNack, combining fixed-size fields (3 bytes) and variable-length encoding of the reason field.
func (encoder *NetworkNackEncoder) Init(value *NetworkNack) {

	l := uint(0)
	l += 3
	l += uint(1 + enc.Nat(value.Reason).EncodingLength())
	encoder.Length = l

}

// Initializes the NetworkNackParsingContext, setting up necessary state for parsing NDN NACK packets.
func (context *NetworkNackParsingContext) Init() {

}

// Encodes a NetworkNack TLV structure into the provided byte buffer, writing the NACK type (253), a fixed length (801), and the encoded reason value in big-endian format.
func (encoder *NetworkNackEncoder) EncodeInto(value *NetworkNack, buf []byte) {

	pos := uint(0)

	buf[pos] = 253
	binary.BigEndian.PutUint16(buf[pos+1:], uint16(801))
	pos += 3

	buf[pos] = byte(enc.Nat(value.Reason).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
}

// Serializes a NetworkNack object into a wire-encoded byte slice using the encoder's specified length.
func (encoder *NetworkNackEncoder) Encode(value *NetworkNack) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a TLV-encoded NetworkNack, extracting the Reason field (type 801) as a uint64 and skipping or rejecting unrecognized critical fields based on the ignoreCritical flag.
func (context *NetworkNackParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*NetworkNack, error) {

	var handled_Reason bool = false

	progress := -1
	_ = progress

	value := &NetworkNack{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 801:
				if true {
					handled = true
					handled_Reason = true
					value.Reason = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Reason = uint64(value.Reason<<8) | uint64(x)
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Reason && err == nil {
		err = enc.ErrSkipRequired{Name: "Reason", TypeNum: 801}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the NetworkNack into its wire format representation using a NetworkNackEncoder.
func (value *NetworkNack) Encode() enc.Wire {
	encoder := NetworkNackEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Encodes the NetworkNack into a byte slice by concatenating its encoded components.
func (value *NetworkNack) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a NetworkNack from encoded data using the provided WireView reader and specified critical error handling flag.
func ParseNetworkNack(reader enc.WireView, ignoreCritical bool) (*NetworkNack, error) {
	context := NetworkNackParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type CachePolicyEncoder struct {
	Length uint
}

type CachePolicyParsingContext struct {
}

// Initializes the encoder's length by calculating the total size required to encode the CachePolicy, including 3 bytes of fixed overhead and the variable-length encoded CachePolicyType.
func (encoder *CachePolicyEncoder) Init(value *CachePolicy) {

	l := uint(0)
	l += 3
	l += uint(1 + enc.Nat(value.CachePolicyType).EncodingLength())
	encoder.Length = l

}

// Initializes the CachePolicyParsingContext, preparing it for parsing and applying cache policies to network data.
func (context *CachePolicyParsingContext) Init() {

}

// Encodes a CachePolicy into the provided byte buffer using TLV format, starting with a fixed header (type 253, length 821) followed by the encoded CachePolicyType.
func (encoder *CachePolicyEncoder) EncodeInto(value *CachePolicy, buf []byte) {

	pos := uint(0)

	buf[pos] = 253
	binary.BigEndian.PutUint16(buf[pos+1:], uint16(821))
	pos += 3

	buf[pos] = byte(enc.Nat(value.CachePolicyType).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
}

// Encodes a CachePolicy value into a byte slice representing its wire format.
func (encoder *CachePolicyEncoder) Encode(value *CachePolicy) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a TLV-encoded CachePolicy from the provided wire format reader, extracting the CachePolicyType field and handling or skipping other fields based on criticality settings.
func (context *CachePolicyParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*CachePolicy, error) {

	var handled_CachePolicyType bool = false

	progress := -1
	_ = progress

	value := &CachePolicy{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 821:
				if true {
					handled = true
					handled_CachePolicyType = true
					value.CachePolicyType = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.CachePolicyType = uint64(value.CachePolicyType<<8) | uint64(x)
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_CachePolicyType && err == nil {
		err = enc.ErrSkipRequired{Name: "CachePolicyType", TypeNum: 821}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the CachePolicy into a wire format using a CachePolicyEncoder for transmission or storage.
func (value *CachePolicy) Encode() enc.Wire {
	encoder := CachePolicyEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// "Encodes the CachePolicy into a byte slice by joining its encoded components."
func (value *CachePolicy) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a CachePolicy from encoded wire format data, with an option to ignore critical unrecognized elements.
func ParseCachePolicy(reader enc.WireView, ignoreCritical bool) (*CachePolicy, error) {
	context := CachePolicyParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type PacketEncoder struct {
	Length uint

	wirePlan []uint

	Interest_encoder InterestEncoder
	Data_encoder     DataEncoder
	LpPacket_encoder LpPacketEncoder
}

type PacketParsingContext struct {
	Interest_context InterestParsingContext
	Data_context     DataParsingContext
	LpPacket_context LpPacketParsingContext
}

// Initializes the PacketEncoder with the provided Packet, calculates the total encoded length, and constructs a wire encoding plan for efficiently encoding the packet's components (Interest, Data, or LpPacket) in TLV format.
func (encoder *PacketEncoder) Init(value *Packet) {
	if value.Interest != nil {
		encoder.Interest_encoder.Init(value.Interest)
	}
	if value.Data != nil {
		encoder.Data_encoder.Init(value.Data)
	}
	if value.LpPacket != nil {
		encoder.LpPacket_encoder.Init(value.LpPacket)
	}

	l := uint(0)
	if value.Interest != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Interest_encoder.Length).EncodingLength())
		l += encoder.Interest_encoder.Length
	}
	if value.Data != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Data_encoder.Length).EncodingLength())
		l += encoder.Data_encoder.Length
	}
	if value.LpPacket != nil {
		l += 1
		l += uint(enc.TLNum(encoder.LpPacket_encoder.Length).EncodingLength())
		l += encoder.LpPacket_encoder.Length
	}
	encoder.Length = l

	wirePlan := make([]uint, 0, 8)
	l = uint(0)
	if value.Interest != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Interest_encoder.Length).EncodingLength())
		if encoder.Interest_encoder.Length > 0 {
			l += encoder.Interest_encoder.wirePlan[0]
			for i := 1; i < len(encoder.Interest_encoder.wirePlan); i++ {
				wirePlan = append(wirePlan, l)
				l = 0
				l = encoder.Interest_encoder.wirePlan[i]
			}
			if l == 0 {
				wirePlan = append(wirePlan, l)
				l = 0
			}
		}
	}
	if value.Data != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Data_encoder.Length).EncodingLength())
		if encoder.Data_encoder.Length > 0 {
			l += encoder.Data_encoder.wirePlan[0]
			for i := 1; i < len(encoder.Data_encoder.wirePlan); i++ {
				wirePlan = append(wirePlan, l)
				l = 0
				l = encoder.Data_encoder.wirePlan[i]
			}
			if l == 0 {
				wirePlan = append(wirePlan, l)
				l = 0
			}
		}
	}
	if value.LpPacket != nil {
		l += 1
		l += uint(enc.TLNum(encoder.LpPacket_encoder.Length).EncodingLength())
		if encoder.LpPacket_encoder.Length > 0 {
			l += encoder.LpPacket_encoder.wirePlan[0]
			for i := 1; i < len(encoder.LpPacket_encoder.wirePlan); i++ {
				wirePlan = append(wirePlan, l)
				l = 0
				l = encoder.LpPacket_encoder.wirePlan[i]
			}
			if l == 0 {
				wirePlan = append(wirePlan, l)
				l = 0
			}
		}
	}
	if l > 0 {
		wirePlan = append(wirePlan, l)
	}
	encoder.wirePlan = wirePlan
}

// Initializes the packet parsing context by resetting its Interest, Data, and LpPacket sub-contexts for fresh parsing operations.
func (context *PacketParsingContext) Init() {
	context.Interest_context.Init()
	context.Data_context.Init()
	context.LpPacket_context.Init()
}

// Encodes a Packet (containing Interest, Data, or LpPacket) into a wire format using TLV encoding, writing type-specific fields (type 5 for Interest, 6 for Data, 100 for LpPacket) with their respective lengths and values into the provided wire buffer.
func (encoder *PacketEncoder) EncodeInto(value *Packet, wire enc.Wire) {

	wireIdx := 0
	buf := wire[wireIdx]

	pos := uint(0)

	if value.Interest != nil {
		buf[pos] = byte(5)
		pos += 1
		pos += uint(enc.TLNum(encoder.Interest_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Interest_encoder.Length > 0 {
			{
				subWire := make(enc.Wire, len(encoder.Interest_encoder.wirePlan))
				subWire[0] = buf[pos:]
				for i := 1; i < len(subWire); i++ {
					subWire[i] = wire[wireIdx+i]
				}
				encoder.Interest_encoder.EncodeInto(value.Interest, subWire)
				for i := 1; i < len(subWire); i++ {
					wire[wireIdx+i] = subWire[i]
				}
				if lastL := encoder.Interest_encoder.wirePlan[len(subWire)-1]; lastL > 0 {
					wireIdx += len(subWire) - 1
					if len(subWire) > 1 {
						pos = lastL
					} else {
						pos += lastL
					}
				} else {
					wireIdx += len(subWire)
					pos = 0
				}
				if wireIdx < len(wire) {
					buf = wire[wireIdx]
				} else {
					buf = nil
				}
			}
		}
	}
	if value.Data != nil {
		buf[pos] = byte(6)
		pos += 1
		pos += uint(enc.TLNum(encoder.Data_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Data_encoder.Length > 0 {
			{
				subWire := make(enc.Wire, len(encoder.Data_encoder.wirePlan))
				subWire[0] = buf[pos:]
				for i := 1; i < len(subWire); i++ {
					subWire[i] = wire[wireIdx+i]
				}
				encoder.Data_encoder.EncodeInto(value.Data, subWire)
				for i := 1; i < len(subWire); i++ {
					wire[wireIdx+i] = subWire[i]
				}
				if lastL := encoder.Data_encoder.wirePlan[len(subWire)-1]; lastL > 0 {
					wireIdx += len(subWire) - 1
					if len(subWire) > 1 {
						pos = lastL
					} else {
						pos += lastL
					}
				} else {
					wireIdx += len(subWire)
					pos = 0
				}
				if wireIdx < len(wire) {
					buf = wire[wireIdx]
				} else {
					buf = nil
				}
			}
		}
	}
	if value.LpPacket != nil {
		buf[pos] = byte(100)
		pos += 1
		pos += uint(enc.TLNum(encoder.LpPacket_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.LpPacket_encoder.Length > 0 {
			{
				subWire := make(enc.Wire, len(encoder.LpPacket_encoder.wirePlan))
				subWire[0] = buf[pos:]
				for i := 1; i < len(subWire); i++ {
					subWire[i] = wire[wireIdx+i]
				}
				encoder.LpPacket_encoder.EncodeInto(value.LpPacket, subWire)
				for i := 1; i < len(subWire); i++ {
					wire[wireIdx+i] = subWire[i]
				}
				if lastL := encoder.LpPacket_encoder.wirePlan[len(subWire)-1]; lastL > 0 {
					wireIdx += len(subWire) - 1
					if len(subWire) > 1 {
						pos = lastL
					} else {
						pos += lastL
					}
				} else {
					wireIdx += len(subWire)
					pos = 0
				}
				if wireIdx < len(wire) {
					buf = wire[wireIdx]
				} else {
					buf = nil
				}
			}
		}
	}
}

// Encodes a Packet into a contiguous byte buffer, partitioned into segments according to the encoder's wire plan, and returns a Wire structure of byte slices referencing these segments.
func (encoder *PacketEncoder) Encode(value *Packet) enc.Wire {
	total := uint(0)
	for _, l := range encoder.wirePlan {
		total += l
	}
	content := make([]byte, total)

	wire := make(enc.Wire, len(encoder.wirePlan))
	for i, l := range encoder.wirePlan {
		if l > 0 {
			wire[i] = content[:l]
			content = content[l:]
		}
	}
	encoder.EncodeInto(value, wire)

	return wire
}

// Parses a binary wire-format packet into a Packet structure by reading TLV-encoded fields for Interest (type 5), Data (type 6), and LpPacket (type 100), handling critical/non-critical fields according to the ignoreCritical flag.
func (context *PacketParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*Packet, error) {

	var handled_Interest bool = false
	var handled_Data bool = false
	var handled_LpPacket bool = false

	progress := -1
	_ = progress

	value := &Packet{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 5:
				if true {
					handled = true
					handled_Interest = true
					value.Interest, err = context.Interest_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 6:
				if true {
					handled = true
					handled_Data = true
					value.Data, err = context.Data_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 100:
				if true {
					handled = true
					handled_LpPacket = true
					value.LpPacket, err = context.LpPacket_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Interest && err == nil {
		value.Interest = nil
	}
	if !handled_Data && err == nil {
		value.Data = nil
	}
	if !handled_LpPacket && err == nil {
		value.LpPacket = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

type NameContainerEncoder struct {
	Length uint

	Name_length uint
}

type NameContainerParsingContext struct {
}

// Initializes the NameContainerEncoder with the total encoded length of the NameContainer's name components, accounting for TLV encoding overhead and component lengths.
func (encoder *NameContainerEncoder) Init(value *NameContainer) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Name_length).EncodingLength())
		l += encoder.Name_length
	}
	encoder.Length = l

}

// Initializes a NameContainerParsingContext for parsing name components in NDN data structures.
func (context *NameContainerParsingContext) Init() {

}

// Encodes the name components of a NameContainer into a binary buffer using TLV format with type 7, followed by length and sequential component encodings.
func (encoder *NameContainerEncoder) EncodeInto(value *NameContainer, buf []byte) {

	pos := uint(0)

	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.Name_length).EncodeInto(buf[pos:]))
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
}

// Encodes the provided NameContainer into its binary wire representation using a preallocated buffer of the encoder's calculated length.
func (encoder *NameContainerEncoder) Encode(value *NameContainer) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

// Parses a TLV-encoded NameContainer from the provided wire reader, extracting the Name field (type 7) and optionally skipping unrecognized critical fields based on the ignoreCritical flag.
func (context *NameContainerParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*NameContainer, error) {

	var handled_Name bool = false

	progress := -1
	_ = progress

	value := &NameContainer{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 7:
				if true {
					handled = true
					handled_Name = true
					delegate := reader.Delegate(int(l))
					value.Name, err = delegate.ReadName()
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Name && err == nil {
		value.Name = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

// Encodes the NameContainer instance into a wire-format representation using the NameContainerEncoder.
func (value *NameContainer) Encode() enc.Wire {
	encoder := NameContainerEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

// Returns the encoded byte representation of the name by concatenating all its components after encoding. 

Example: Combines each component of the NameContainer into a single byte slice after TLV encoding.
func (value *NameContainer) Bytes() []byte {
	return value.Encode().Join()
}

// Parses a NameContainer from encoded wire format data using the provided reader, with an option to ignore critical unrecognized elements.
func ParseNameContainer(reader enc.WireView, ignoreCritical bool) (*NameContainer, error) {
	context := NameContainerParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}
